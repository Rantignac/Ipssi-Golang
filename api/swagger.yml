swagger: '2.0'
info:
  title:  TodoList
  version:  '0.0.1'
  description:  'Todo list api'
  contact:
    email: 'quentin.nicolas.tessier@gmail.com'
    
schemes:
  - https

host: 'api.ipssi.com'

basePath:  '/todo'

paths:
  /tasks:
    post:
      tags:
        - tasks
      description: Create a new task
      consumes: 
        - application/json
      produces: 
        - application/json
      parameters: 
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Tasks'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Tasks'
        400:
          description: bad request
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update task by id
      tags:
        - tasks
      consumes: 
        - application/json
      produces: 
        - application/json
      parameters: 
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Tasks'
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
            
    get:
      description: 'Get All Tasks'
      produces: 
        - application/json
      tags:
        - tasks
      parameters: 
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
      responses:
        200:
          description: Returns all tasks
          schema:
            type: array
            items:
              $ref: '#/definitions/Tasks'
              
  '/tasks/{id}':
    get:
      description: 'Find a task by its id.'
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Task'
    delete:
      description: Delete a task by its ID
      parameters: 
        - name: id
          in: path
          required: true
          type: string
      responses:
        204:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
            
  '/tasks/status/{status}':
    get:
      description: Find all tasks by their status
      tags: 
        - tasks
      parameters: 
        - name: status
          in: path
          required: true
          type: boolean
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Tasks'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
    
definitions:
  Tasks:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a specific task for a given UUID
      title:
        type: string
        description: Title representing the title of the tasks
      created_at:
        type: string
        format: dateTime
        description: Is the date when the task has been created
        
      status:
        type: boolean
        description: Task is done or not
  Error:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string